<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>

<!--This file has been automatically generated by Doctor Max. DO NOT EDIT THIS FILE DIRECTLY.-->

<c74object name="bach.path2llll" module="bach" kind="patcher">

	<digest>
		Obtain full directory tree in llll form
	</digest>

	<description>
		Converts a directory path into an llll containing the full information about its files and subfolders.
		Subfolders are represented by sublists, whose first elements are the subfolder names.
	</description>

	<!--METADATA-->
	<metadatalist>
		<metadata name="author">bachproject</metadata>
		<metadata name="tag">bach</metadata>
		<metadata name="tag">bach abstractions</metadata>
		<metadata name="tag">bach llll</metadata>
	</metadatalist>

	<!--INLETS-->
	<inletlist>
		<inlet id="0" type="INLET_TYPE">
			<digest>
				The directory path
			</digest>
			<description>
			</description>
		</inlet>
	</inletlist>

	<!--OUTLETS-->
	<outletlist>
		<outlet id="0" type="INLET_TYPE">
			<digest>
				The directory tree
			</digest>
			<description>
			</description>
		</outlet>
		<outlet id="1" type="INLET_TYPE">
			<digest>
				The directory tree with full element paths
			</digest>
			<description>
			</description>
		</outlet>
	</outletlist>

	<!--ARGUMENTS-->
	<objarglist>
		<objarg name="pathname" optional="1" type="symbol">
			<digest>
				Root path name
			</digest>
			<description>
				A symbol as argument specifies the initial path name.
			</description>
		</objarg>
	</objarglist>

	<!--MESSAGES-->
	<methodlist>
		<method name="bang">
			<arglist />
			<digest>
				Output directory tree
			</digest>
			<description>
				Output the directory tree of the most recently received input path.
			</description>
		</method>
		<method name="symbol">
			<arglist />
			<digest>
				Obtain directory tree
			</digest>
			<description>
				A symbol is considered to be the path to the folder which has to be inspected.
				All the files and subfolder contained in the entered folder are organized in llll form and output,
				under the convention that each subfolder are represented by a sublist whose first element
				is the subfolder name. Left outlet outputs such tree in llll form. Right outlet outputs the same tree
				where each element retains its full path. As always, right outlets fires before the left one.
			</description>
		</method>
	</methodlist>

	<!--ATTRIBUTES-->
	<attributelist>
		<attribute name="filesonly" get="1" set="1" type="int" size="1">
			<digest>
				Files Only
			</digest>
			<description>
				Toggles the ability to drop folder names from output llll.
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Files Only" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="folderpos" get="1" set="1" type="int" size="1">
			<digest>
				Folder And Files Position
			</digest>
			<description>
				Sets the file ordering type: Mixed (0), Folders First (1), Files First (2).
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Folder And Files Position" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="enumindex" />
			</attributelist>
		</attribute>
		<attribute name="fullinitpath" get="1" set="1" type="int" size="1">
			<digest>
				Preserve Full Initial Path
			</digest>
			<description>
				The word <m>types</m>, followed by one or more four-letter filetype codes, sets the file
				types that the object will look for in the specified folder (see the <o>folder</o> object for more information).
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Preserve Full Initial Path" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="nosort" get="1" set="1" type="int" size="1">
			<digest>
				Avoid File-Specific Sorting
			</digest>
			<description>
				Toggle the ability to avoid file-specific sorting of the symbols, where files are compared
				ignoring the case, and where some elements such as underscores, spaces or tilde will come before any letter
				in the file ordering. Default is 0. Toggle this attribute to drastically reduce computation time, if you have
				folders containing a lot of data.
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Avoid File-Specific Sorting" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="out" get="1" set="1" type="symbol" size="1">
			<digest>
				Outlet Types
			</digest>
			<description>
				The <m>out</m> attribute is a sequence of characters identifying the outlet types (one character for each llll outlet). Characters can be one of the following: <br />
				<m>n</m> (default): 'native' output: faster and more precise between bach objects, but unreadable by standard Max objects (an "bach.llll" message appears instead). <br />
				<m>t</m>: 'text' output: slower and limited in size, but readable by standard Max objects. A plain llll in text format is a generic Max message.
				To keep the representation invertible (i.e., to allow a bach object receiving a text-format llll to interpret it exactly as if it was native format,
				except for the size limitation), some specific kinds of symbols are preceded by a backtick: namely, symbols containing parens, or containing textual
				representations of numbers or pitches, or beginning with a backtick, plus the symbols "null" and "nil" (distinct from the reserved words
				"null" and "nil" representing the empty list and the empty sublist) are preceded by a backtick. Moreover, the symbols "int", "float" or "list"
				are preceded by a backtick only if they are the first element of an llll, to distinguish them from the corresponding reserved messages of Max. <br />
				<m>m</m>: 'max' output: mostly equivalent to the "t" specifier, but no symbol is backticket except "int", "float" and "list" at the beginning of an llll.
				It is important to notice that, differently from text-format lllls proper, Max-format lllls might not be invertible even if they do not reach the size
				limit for Max message. This means that a bach object receiving a Max-format llll output from another bach object might interpret it differently
				from the original, or in some cases might even reject it. <br />
				<m>x</m>: disabled output (nothing is output) <br />
				<m>p</m>: 'portal' output: only used by bach.portal to intercept the @out attribute specified while creating the abstraction (see bach.portal). <br />
				The native output is recommended, unless communication with standard Max messages is needed.
				Disabling unused outputs can be useful if extreme optimization of the patch is needed.
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Outlet Types" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="types" get="1" set="1" type="sym_array" size="0">
			<digest>
				File Types
			</digest>
			<description>
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="File Types" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
	</attributelist>

	<!--DISCUSSION-->
	<discussion>
		The output of <o>bach.path2llll</o> can be connected with a <o>bach.tree</o> object, with the
		<m>firsteleminllllisllllname</m> attribute set to 1.
	</discussion>

	<!--SEEALSO-->
	<seealsolist>
		<seealso name="folder" />
		<seealso name="bach.tree" />
		<seealso name="bach.dict2llll" />
		<seealso name="dropfile" />
	</seealsolist>

	<misc name = "Input">
		<entry name ="Inlet 1 (symbol)">
			<description>
				The directory path.
			</description>
		</entry>
	</misc>

	<misc name = "Output">
		<entry name ="Outlet 1 (llll)">
			<description>
				The directory tree.
			</description>
		</entry>
		<entry name ="Outlet 2 (llll)">
			<description>
				The directory tree with full element paths.
			</description>
		</entry>
	</misc>

	<misc name = "Discussion">
		<entry name ="More details">
			<description>
		The output of <o>bach.path2llll</o> can be connected with a <o>bach.tree</o> object, with the
		<m>firsteleminllllisllllname</m> attribute set to 1.
			</description>
		</entry>
		<entry name ="Keywords">
			<description>
convert, file, folder, path, name, tree, import, full, directory, subfolder, hierarchy.
			</description>
		</entry>
	</misc>

</c74object>