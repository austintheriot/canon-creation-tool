<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>

<!--This file has been automatically generated by Doctor Max. DO NOT EDIT THIS FILE DIRECTLY.-->

<c74object name="bach.convertbase" module="bach" category="Math">

	<digest>
		Perform base conversion for numbers
	</digest>

	<description>
		Converts numbers from any base to any other base.
	</description>

	<!--METADATA-->
	<metadatalist>
		<metadata name="author">bachproject</metadata>
		<metadata name="tag">bach</metadata>
		<metadata name="tag">bach abstractions</metadata>
		<metadata name="tag">bach math</metadata>
	</metadatalist>

	<!--INLETS-->
	<inletlist>
		<inlet id="0" type="INLET_TYPE">
			<digest>
				The number in the original base
			</digest>
			<description>
			</description>
		</inlet>
		<inlet id="1" type="INLET_TYPE">
			<digest>
				The digits in the original base
			</digest>
			<description>
			</description>
		</inlet>
	</inletlist>

	<!--OUTLETS-->
	<outletlist>
		<outlet id="0" type="INLET_TYPE">
			<digest>
				The number in the target base
			</digest>
			<description>
			</description>
		</outlet>
		<outlet id="1" type="INLET_TYPE">
			<digest>
				The digits in the target base
			</digest>
			<description>
			</description>
		</outlet>
	</outletlist>

	<!--ARGUMENTS-->
	<objarglist>
		<objarg name="startbase" optional="1" type="int">
			<digest>
				The original base
			</digest>
			<description>
				The first integer argument sets the base of the incoming numbers or digits.
			</description>
		</objarg>
		<objarg name="endbase" optional="1" type="int">
			<digest>
				The target base
			</digest>
			<description>
				The second integer argument sets the desired output base.
			</description>
		</objarg>
	</objarglist>

	<!--MESSAGES-->
	<methodlist>
		<method name="float">
			<arglist />
			<digest>
				Set number, output result
			</digest>
			<description>
				Any float in the left inlet
				is consider as the number to be converted, written in the starting base
				(e.g. <b>21.2</b> meaning 7.66666... if starting base is base 3).
				The conversion is performed, and the converted digits
				are output from the right outlet, with a level of parentheses around the
				digits corresponding to the integer part, and a level of parentheses around the digits
				corresponding to the fractional part. The converted number is output from the left outlet.
			</description>
		</method>
		<method name="int">
			<arglist />
			<digest>
				Set number, output result
			</digest>
			<description>
				Any integer in the left inlet is consider as the number to be converted,
				written in the starting base (e.g. <b>21</b> meaning 7 if starting base is base 3).
				The conversion is performed, and the converted digits
				are output from the right outlet, while the converted number (obtained by simply
				juxtaposition of the same digits) is output from the left outlet.
			</description>
		</method>
		<method name="llll">
			<arglist />
			<digest>
				Set digits, output result
			</digest>
			<description>
				Any <m>llll</m> in the second inlet is considered as a plain list
				of digits to be converted.
				The conversion is performed, and the converted digits
				are output from the right outlet, while the converted number (obtained by simply
				juxtaposition of the same digits) is output from the left outlet. <br />
				If the list is an <m>llll</m> of depth 2, it is interpreted as a floating point number,
				having as first sublist the digits corresponding to the integer part of the number
				and as second sublist the digits corresponding to the fractional part.
			</description>
		</method>
		<method name="rational">
			<arglist />
			<digest>
				Set number, output result
			</digest>
			<description>
				Any rational number is converted into a floating point number. See <m>float</m>.
			</description>
		</method>
	</methodlist>

	<!--ATTRIBUTES-->
	<attributelist>
		<attribute name="digitssymout" get="1" set="1" type="int" size="1">
			<digest>
				Right Outlet Symbol Mode
			</digest>
			<description>
				Handles if and when symbols should be output instead of digits from right inlet. <br />
				- Never (default): always output number-like digits, even if digits are greater than 10 (i.e.: outputs "12" instead of "C", and so on) <br />
				- If Needed: if the digit is alphabetical (e.g. "C"), then it is output as a symbol,
				otherwise it is output as a standard number; <br />
				- Always: the digits are always output as symbols.
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Right Outlet Symbol Mode" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="enumindex" />
			</attributelist>
		</attribute>
		<attribute name="endbase" get="1" set="1" type="int" size="1">
			<digest>
				End Base
			</digest>
			<description>
				The base in which the number should be converted.
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="End Base" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="maxdecimals" get="1" set="1" type="int" size="1">
			<digest>
				Maximum Decimal Digits
			</digest>
			<description>
				The maximum number of decimal digits for the conversion. Default is 6.
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Maximum Decimal Digits" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="numbersymout" get="1" set="1" type="int" size="1">
			<digest>
				Left Outlet Symbol Mode
			</digest>
			<description>
				Handles if and when symbols should be output instead of numbers from left inlet. <br />
				- Never: always output number (this might result in incorrect output if <m>endbase</m> is greater than 10); <br />
				- If Needed (default): if the converted number has alphabetic digits (e.g. "12AD9"), then it is output as a symbol,
				otherwise it is output as a standard number; <br />
				- Always: the converted number is always output as a symbol.
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Left Outlet Symbol Mode" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="enumindex" />
			</attributelist>
		</attribute>
		<attribute name="out" get="1" set="1" type="symbol" size="1">
			<digest>
				Outlet Types
			</digest>
			<description>
				The <m>out</m> attribute is a sequence of characters identifying the outlet types (one character for each llll outlet). Characters can be one of the following: <br />
				<m>n</m> (default): 'native' output: faster and more precise between bach objects, but unreadable by standard Max objects (an "bach.llll" message appears instead). <br />
				<m>t</m>: 'text' output: slower and limited in size, but readable by standard Max objects. A plain llll in text format is a generic Max message.
				To keep the representation invertible (i.e., to allow a bach object receiving a text-format llll to interpret it exactly as if it was native format,
				except for the size limitation), some specific kinds of symbols are preceded by a backtick: namely, symbols containing parens, or containing textual
				representations of numbers or pitches, or beginning with a backtick, plus the symbols "null" and "nil" (distinct from the reserved words
				"null" and "nil" representing the empty list and the empty sublist) are preceded by a backtick. Moreover, the symbols "int", "float" or "list"
				are preceded by a backtick only if they are the first element of an llll, to distinguish them from the corresponding reserved messages of Max. <br />
				<m>m</m>: 'max' output: mostly equivalent to the "t" specifier, but no symbol is backticket except "int", "float" and "list" at the beginning of an llll.
				It is important to notice that, differently from text-format lllls proper, Max-format lllls might not be invertible even if they do not reach the size
				limit for Max message. This means that a bach object receiving a Max-format llll output from another bach object might interpret it differently
				from the original, or in some cases might even reject it. <br />
				<m>x</m>: disabled output (nothing is output) <br />
				<m>p</m>: 'portal' output: only used by bach.portal to intercept the @out attribute specified while creating the abstraction (see bach.portal). <br />
				The native output is recommended, unless communication with standard Max messages is needed.
				Disabling unused outputs can be useful if extreme optimization of the patch is needed.
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Outlet Types" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="startbase" get="1" set="1" type="int" size="1">
			<digest>
				Start Base
			</digest>
			<description>
				The base of the original number or digits.
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Start Base" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
	</attributelist>

	<!--SEEALSO-->
	<seealsolist>
		<seealso name="bach.factorize" />
		<seealso name="bach.div" display="bach./" type="refpage" />
		<seealso name="bach.remainder" display="bach.%" type="refpage" />
		<seealso name="bach.gcd" />
		<seealso name="bach.lcm" />
	</seealsolist>

	<misc name = "Input">
		<entry name ="Inlet 1 (number/symbol)">
			<description>
				The number in the original base.
			</description>
		</entry>
		<entry name ="Inlet 2 (llll)">
			<description>
				The digits in the original base.
			</description>
		</entry>
	</misc>

	<misc name = "Output">
		<entry name ="Outlet 1 (number/symbol)">
			<description>
				The number in the target base.
			</description>
		</entry>
		<entry name ="Outlet 2 (llll)">
			<description>
				The digits in the target base.
			</description>
		</entry>
	</misc>

</c74object>