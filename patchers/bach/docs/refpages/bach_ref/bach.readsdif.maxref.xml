<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>

<!--This file has been automatically generated by Doctor Max. DO NOT EDIT THIS FILE DIRECTLY.-->

<c74object name="bach.readsdif" module="bach">

	<digest>
		Read an SDIF file
	</digest>

	<description>
		Reads an SDIF file and returns its contents as lllls.
	</description>

	<!--METADATA-->
	<metadatalist>
		<metadata name="author">bachproject</metadata>
		<metadata name="tag">bach</metadata>
		<metadata name="tag">bach objects</metadata>
		<metadata name="tag">bach llll</metadata>
	</metadatalist>

	<!--INLETS-->
	<inletlist>
		<inlet id="0" type="INLET_TYPE">
			<digest>
				Read to load an SDIF file, bang to output its contents
			</digest>
			<description>
			</description>
		</inlet>
	</inletlist>

	<!--OUTLETS-->
	<outletlist>
		<outlet id="0" type="INLET_TYPE">
			<digest>
				header llll
			</digest>
			<description>
			</description>
		</outlet>
		<outlet id="1" type="INLET_TYPE">
			<digest>
				body llll
			</digest>
			<description>
			</description>
		</outlet>
		<outlet id="2" type="INLET_TYPE">
			<digest>
				bang when loading is completed
			</digest>
			<description>
			</description>
		</outlet>
	</outletlist>

	<!--ARGUMENTS-->
	<objarglist>
	</objarglist>

	<!--MESSAGES-->
	<methodlist>
		<method name="(drag)">
			<arglist />
			<digest>
				Drag-and-drop file loading
			</digest>
			<description>
				The specified SDIF file is read from disk and the data it contains is stored
				and optionally output, according to the <m>auto</m> attribute.
			</description>
		</method>
		<method name="bang">
			<arglist />
			<digest>
				Output the stored lllls
			</digest>
			<description>
				After an SDIF file has been read, a bang causes its contents to be output.
			</description>
		</method>
		<method name="read">
			<arg name="file_name" optional="1" type="symbol" />
			<digest>
				Read an SDIF file from disk
			</digest>
			<description>
				Syntax: <b>read <m>[&lt;symbol: file_name&gt;]</m> </b><br />				<br />
				The specified file is read from disk
				and the data contained in it are converted into two lllls,
				one for the SDIF header and one for the data body.<br/><br/>
				The format of the two lllls is as follows:<br/>
				- The header llll is composed by three optional lllls,
				respectively for the name-value tables (preceded by the <m>nvt</m> key),
				the frame definitions (preceded by the <m>frametypes</m> key)
				and the matrix definitions (preceded by the <m>matrixtypes</m> key).
				Each of these sublists is actually output only if the corresponding data are present
				in the SDIF files. The structure of the header llll is <br/>
				<m>(nvt ((&lt;name&gt; &lt;value&gt;) ...) ...)<br/>
				(frametypes (&lt;frame signature&gt; ((&lt;matrix signature&gt; &lt;component name (optional)&gt;) ...) ...) ...)<br/>
				(matrixtypes (&lt;matrix signature&gt; (&lt;column name&gt; ...) ...) ...)</m><br/><br/>
				- The body llll contains the actual data from the SDIF file, rearranged by stream.
				It is composed by one sublist for each stream in the SDIF file.
				The structure of the body llll is <br/>
				<m> (&lt;stream id&gt; (&lt;frame signature&gt; &lt;time&gt; ((&lt;matrix signature&gt; ((&lt;data item&gt; ...) ...) ...)) ...) ...)</m><br/>
				This means that the data contained in each matrix are represented as a sublist
				containing one sublist per row, containing the row's data.
				Text and Char matrices are an exceptions, as the text they contain is packed into symbols, one per row.
				Therefore, the structure of a text matrix sublist is<br/>
				<m> &lt;matrix signature&gt; (&lt;row text&gt; ...)</m><br/><br/>
				When the reading operation is completed, a <m>bang</m> is output from the third outlet.<br/>
				The lllls are optionally output, according to the <m>auto</m> attribute.
				In this case, the body llll will be output from the second outlet,
				and the header llll from the first outlet.
				If no file name is provided, a dialog box will open.
			</description>
		</method>
	</methodlist>

	<!--ATTRIBUTES-->
	<attributelist>
		<attribute name="auto" get="1" set="1" type="int" size="1">
			<digest>
				
			</digest>
			<description>
				When set to 1, the contents of the SDIF file
				are automatically output immediately after being read from disk.
			</description>
			<attributelist>
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="out" get="1" set="1" type="symbol" size="1">
			<digest>
				Outlet Types
			</digest>
			<description>
				The <m>out</m> attribute is a sequence of characters identifying the outlet types (one character for each llll outlet). Characters can be one of the following: <br />
				<m>n</m> (default): 'native' output: faster and more precise between bach objects, but unreadable by standard Max objects (an "bach.llll" message appears instead). <br />
				<m>t</m>: 'text' output: slower and limited in size, but readable by standard Max objects. A plain llll in text format is a generic Max message.
				To keep the representation invertible (i.e., to allow a bach object receiving a text-format llll to interpret it exactly as if it was native format,
				except for the size limitation), some specific kinds of symbols are preceded by a backtick: namely, symbols containing parens, or containing textual
				representations of numbers or pitches, or beginning with a backtick, plus the symbols "null" and "nil" (distinct from the reserved words
				"null" and "nil" representing the empty list and the empty sublist) are preceded by a backtick. Moreover, the symbols "int", "float" or "list"
				are preceded by a backtick only if they are the first element of an llll, to distinguish them from the corresponding reserved messages of Max. <br />
				<m>m</m>: 'max' output: mostly equivalent to the "t" specifier, but no symbol is backticket except "int", "float" and "list" at the beginning of an llll.
				It is important to notice that, differently from text-format lllls proper, Max-format lllls might not be invertible even if they do not reach the size
				limit for Max message. This means that a bach object receiving a Max-format llll output from another bach object might interpret it differently
				from the original, or in some cases might even reject it. <br />
				<m>x</m>: disabled output (nothing is output) <br />
				<m>p</m>: 'portal' output: only used by bach.portal to intercept the @out attribute specified while creating the abstraction (see bach.portal). <br />
				The native output is recommended, unless communication with standard Max messages is needed.
				Disabling unused outputs can be useful if extreme optimization of the patch is needed.
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Outlet Types" />
				<attribute name="paint" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
	</attributelist>

	<!--SEEALSO-->
	<seealsolist>
		<seealso name="bach.writesdif" />
		<seealso name="bach.read" />
		<seealso name="bach.roll" />
	</seealsolist>

	<misc name = "Input">
		<entry name ="Inlet 1 (read/bang)">
			<description>
				Read to load an SDIF file, bang to output its contents.
			</description>
		</entry>
	</misc>

	<misc name = "Output">
		<entry name ="Outlet 1 (llll)">
			<description>
				header llll.
			</description>
		</entry>
		<entry name ="Outlet 2 (llll)">
			<description>
				body llll.
			</description>
		</entry>
		<entry name ="Outlet 3 (bang)">
			<description>
				bang when loading is completed.
			</description>
		</entry>
	</misc>

</c74object>